Warmup project - September, 2014
Claire Diehl

The behaviors that I have programmed for the neato are teleop, wall follow and obstacle avoidance. The normal mode is teleop with keys w, a, s, and d allotted for forwards, backwards and turning in two directions. When the robot detects a wall (a object that takes up a large area in the lidar scan) it will transition to wall follow until it reaches the end of the wall. If there is an obstacle in front of the neato (10-20 degrees to either side of center), the neato will turn to avoid it, overriding teleop until the object is no longer detected in front of it.
I structured my code in a couple of different functions. There is a function for each mode (teleop, wall follow and obstacle avoidance) as well as a switcher function to move between these modes and a couple of data processing functions. These functions get key presses (getch) and deal with data (valid_scan).
The switcher function starts to deal with the lidar data by detecting at what points there is something detected. Based on this the decision between teleop, obstacle avoidance and wall follow is made. If there is nothing detected, teleop is enabled. If the number of data points detected is low, an obstacle is assumed to exits. When there is a larger number of data points, the obstacle is assumed to be a wall. From here the appropriate funtion is called.
Teleop works much in the way that the code in class works. The getch function gets the key presses which are coded to different directions.
Obstacle avoidance deals with the index of the data points that come from the lidar. If there is an obstacle detected in the 10 data points of center, the neato will change its angular speed proportionally. Once the obstacle is out of range, teleop is returned.
Wallfollow works in much the same way as obstacle avoidance. Based on the index of the detection, the code estimates the angle that the wall is at and then orients itself at 90 degrees to the wall using proportional control. When it is within reasonable error, it will begin to drive forward. If the angle to the wall gets a bit off, it will recorrect. I had slight trouble with it the neato drifing closer and closer to the wall. After a bit of work I realised that my code did not depend on the actual distance to the wall and I added a small change that would push the neato away from the wall when it gets within .8 meters.
I seriously struggled with python errors. Programming the actual neato controls was pretty simple when I figured it out. However once I programmed all of wallfollow and most of obstacle avoidance, my code broke and I struggled with the errors for days. Additionally once I figured out my errors my code had been messed with enough that it didn't work anymore, which was more frustrating then if I had the errors to begin with.
To improve my code I would optimize the proportional control and add PID control. This is because currently my wallfollow is exceptionally jerky. My transitions could be a little more smooth as well.
Lessons I learned for future robotic programming is to check before changing working code that git is actually setup for the correct folders.